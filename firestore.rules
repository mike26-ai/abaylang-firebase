
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Check for a custom admin claim OR if the user's email matches the known admin email.
      // Replace 'mahdernmamo@gmail.com' with your actual admin email if not using environment variables here.
      return request.auth.token.admin == true || request.auth.token.email == 'mahdernmamo@gmail.com';
    }

    // Users Collection
    // - Authenticated users can read any profile (for tutor info, etc.)
    // - Users can only create and update their OWN profile document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    // Bookings Collection
    // - Admins can read/write any booking.
    // - Authenticated users can create bookings for themselves.
    // - Users can only read and update (e.g., cancel) their OWN bookings.
    match /bookings/{bookingId} {
      allow read, write: if isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth.uid == resource.data.userId;
    }

    // Testimonials Collection
    // - Anyone can read approved testimonials.
    // - Authenticated users can create new testimonials (which will be 'pending').
    // - Admins can read, update (approve/reject), and delete any testimonial.
    match /testimonials/{testimonialId} {
       allow read: if resource.data.status == 'approved' || isAdmin();
       allow create: if request.auth != null;
       allow update, delete: if isAdmin();
    }
    
    // Contact Messages Collection
    // - Only admins can read or write (update read status) messages.
    // - No public read access.
    match /contactMessages/{messageId} {
      allow read, write: if isAdmin();
      // Note: There's an implicit 'allow create' from the client-side, 
      // which is generally acceptable for a contact form.
      // To tighten this, you would use a Cloud Function triggered by a form submission.
    }
    
    // TimeOff Collection
    // - Any authenticated user can read the time-off schedule (needed for booking page).
    // - ONLY admins can create, update, or delete time-off documents.
    match /timeOff/{timeOffId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(); // create, update, delete
    }
  }
}
