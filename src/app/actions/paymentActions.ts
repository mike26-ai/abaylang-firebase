'use server';

import { Paddle } from '@paddle/paddle-node-sdk';

// ====================================================================================
// --- TROUBLESHOOTING PADDLE CONFIGURATION ERRORS ---
// ====================================================================================
// If you are seeing a "You aren't permitted to perform this request" error:
// 1.  You MUST generate an API key with "Full Access" permissions. A "Read-Only" key will fail.
// 2.  You MUST use a SANDBOX key with SANDBOX Price IDs. A LIVE key will not work with SANDBOX products (and vice-versa).
// Find this in your Paddle Dashboard under: Developer Tools > Authentication > API keys
//
// If you are seeing a "transaction_checkout_not_enabled" error:
// 1.  This is a PADDLE DASHBOARD configuration issue, NOT a code issue.
// 2.  Go to your Paddle Dashboard -> Catalog -> Products.
// 3.  Click on the product you are trying to sell.
// 4.  In the "Prices" section, click the three dots (...) next to the price you are using and "Edit price".
// 5.  Ensure the "Allow this price to be used with Paddle Checkout" checkbox is CHECKED.
//
// If you are seeing a "Default Payment Link has not yet been defined" error:
// 1.  This is a PADDLE DASHBOARD configuration issue, NOT a code issue.
// 2.  Go to your Paddle Sandbox Dashboard -> Checkout -> Checkout settings.
// 3.  Under "Default payment link", you must either create a new one or set an existing one as default.
// 4.  This is required by Paddle for API-created checkouts to have a fallback domain.
// ====================================================================================


// Initialize Paddle. The SDK will throw an error if the key is missing.
// This check improves error messaging if the environment variable is not set.
if (!process.env.PADDLE_API_KEY || process.env.PADDLE_API_KEY.includes("YOUR_PADDLE_API_KEY")) {
    console.error("CRITICAL: PADDLE_API_KEY is not set in the environment variables. The application cannot process payments.");
}

// Trim whitespace and remove potential quotes from the API key to prevent formatting errors.
const paddleApiKey = (process.env.PADDLE_API_KEY || '').trim().replace(/['"]+/g, '');
// Explicitly set the environment to 'sandbox' to match the sandbox API key.
const paddle = new Paddle(paddleApiKey, { environment: 'sandbox' });


/**
 * Creates a secure checkout link using the Paddle API.
 *
 * @param priceId - The specific Paddle Price ID for the item being purchased.
 * @param userEmail - The email of the customer.
 * @param bookingId - The unique ID of the booking document in Firestore.
 * @returns The URL for the Paddle checkout page.
 */
export async function createPaddleCheckout(
  priceId: string,
  userEmail: string,
  bookingId: string
): Promise<string | undefined> {

  // Step 1: Validate the provided priceId to ensure it's not missing or a placeholder.
  if (!priceId || priceId.includes("YOUR_PADDLE") || priceId.trim() === "") {
    console.error(`Error: An invalid Paddle Price ID was provided: '${priceId}'. Check the product configuration.`);
    throw new Error(`The product ID is not configured correctly. Please contact support.`);
  }

  try {
    // Step 2: Call the Paddle API to create a new transaction.
    const transaction = await paddle.transactions.create({
      items: [
        {
          priceId: priceId, // Use the directly provided Price ID
          quantity: 1,
        },
      ],
      customer: {
        email: userEmail,
      },
      // We pass our internal bookingId here. This is crucial for the webhook later.
      customData: {
        booking_id: bookingId,
      },
    });

    // Step 3: Return the secure checkout URL generated by Paddle.
    // The optional chaining (?.) is a safe way to access nested properties.
    return transaction.checkout?.url;

  } catch (error: any) {
    // --- IMPROVED ERROR LOGGING ---
    // Log the specific error from the Paddle SDK for better debugging.
    console.error('Paddle SDK Error:', error.message);
    if (error.body) {
      console.error('Paddle Error Details:', JSON.stringify(error.body, null, 2));
    }
    // Throw a more informative error back to the client.
    throw new Error(`Payment provider error: ${error.message}. Please check your Paddle configuration.`);
  }
}
