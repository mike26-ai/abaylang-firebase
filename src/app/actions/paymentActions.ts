'use server';

import { Paddle } from '@paddle/paddle-node-sdk';

// Initialize Paddle with the API key from environment variables.
// The SDK will automatically throw an error if the key is missing.
const paddle = new Paddle(process.env.PADDLE_API_KEY);

/**
 * Creates a secure checkout link using the Paddle API.
 *
 * @param lessonType - The type of lesson being booked (e.g., 'quick-practice', 'comprehensive-lesson').
 * @param userEmail - The email of the customer.
 * @param bookingId - The unique ID of the booking document in Firestore.
 * @returns The URL for the Paddle checkout page.
 */
export async function createPaddleCheckout(
  lessonType: string,
  userEmail: string,
  bookingId: string
): Promise<string | undefined> {

  // Step 1: Determine which Paddle Price ID to use based on the lesson type.
  // We fetch these IDs from environment variables for security and flexibility.
  let priceId: string | undefined;
  if (lessonType === 'Quick Practice') {
    priceId = process.env.NEXT_PUBLIC_PADDLE_QUICK_PRACTICE_PRICE_ID;
  } else if (lessonType === 'Comprehensive Lesson') {
    priceId = process.env.NEXT_PUBLIC_PADDLE_COMPREHENSIVE_LESSON_PRICE_ID;
  }
  // NOTE: This can be expanded with 'else if' blocks for every other product type (packages, etc.)

  // If we couldn't find a matching price ID, we cannot proceed.
  if (!priceId) {
    console.error(`Error: No Paddle Price ID found for lesson type: ${lessonType}`);
    throw new Error('Could not find a matching product for this lesson type.');
  }

  try {
    // Step 2: Call the Paddle API to create a new transaction.
    const transaction = await paddle.transactions.create({
      items: [
        {
          priceId: priceId, // Use the dynamically selected Price ID
          quantity: 1,
        },
      ],
      customer: {
        email: userEmail,
      },
      // We pass our internal bookingId here. This is crucial for the webhook later.
      customData: {
        booking_id: bookingId,
      },
    });

    // Step 3: Return the secure checkout URL generated by Paddle.
    // The optional chaining (?.) is a safe way to access nested properties.
    return transaction.checkout?.url;

  } catch (error) {
    console.error('Error creating Paddle checkout transaction:', error);
    // In case of an API error, we throw a generic message to the user.
    throw new Error('Failed to create payment session.');
  }
}
